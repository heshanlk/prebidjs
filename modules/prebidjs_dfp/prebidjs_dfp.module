<?php

/**
 * @file
 */

/**
 * Implements hook_form_alter()
 */
function prebidjs_dfp_form_alter(&$form, &$form_state, $form_id){
  // dsm($form);
  // dsm($form_id);
  if($form_id == 'dfp_admin_settings'){
    $form['prebidjs_dfp_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Prebid.js Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 35,
      '#group' => 'settings',
    );
    $form['prebidjs_dfp_settings']['prebidjs_timeout'] = array(
      '#type' => 'textfield',
      '#title' => t('Timeout (ms)'),
      '#default_value' => variable_get('prebidjs_timeout', 2000),
    );
    $form['prebidjs_dfp_settings']['prebidjs_bidder_sequence'] = array(
      '#type' => 'radios',
      '#title' => t('Bidder Mode'),
      '#default_value' => variable_get('prebidjs_bidder_sequence', 'random'),
      '#options' => array(
        'random' => 'Random',
        'fixed' => 'Fixed'
      )
    );
    $form['prebidjs_dfp_settings']['prebidjs_price_granularity'] = array(
      '#type' => 'radios',
      '#title' => t('Price Granularity'),
      '#default_value' => variable_get('prebidjs_price_granularity', 'medium'),
      '#options' => array(
        'auto' => 'Auto',
        'log' => 'Low',
        'medium' => 'Medium',
        'high' => 'High',
        'dense' => 'Dense'
      )
    );
    $form['prebidjs_dfp_settings']['prebidjs_send_all_bids'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send All Bids'),
      '#default_value' => variable_get('prebidjs_send_all_bids', TRUE),
    );
    $form['prebidjs_dfp_settings']['prebidjs_debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Debug'),
      '#default_value' => variable_get('prebidjs_debug', FALSE),
    );
  }
}


/**
 * Form alter for the ctools_export_ui_edit_item_form.
 */
function prebidjs_dfp_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  // Allow other modules to dictate which group the fieldset lives in.
  $group = 'settings';
  drupal_alter('prebidjs_dfp_form_group', $group);
  $settings = prebidjs_dfp_settings_load($form_state['plugin']['schema'], $form_state['item']->{$form_state['plugin']['export']['key']});
  $form['prebidjs_dfp_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Prebid.js options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 35,
    '#group' => $group,
  );
  if (!empty($group)) {
    $form['prebidjs_dfp_settings']['#attached'] = array(
      'js' => array(
        'vertical-tabs' => drupal_get_path('module', 'prebidjs_dfp') . "/prebidjs_dfp.admin.js",
      ),
    );
  }
  
  $form['prebidjs_dfp_settings']['bidder_adapters'] = array(
    '#type' => 'container'
  );
  
  // Get all the bidding plugins
  $bidder_adapters = prebidjs_get_bidder_adapters();
  foreach($bidder_adapters as $name => $adapter){
    // dsm($adapter, $name);
    $form['prebidjs_dfp_settings']['bidder_adapters'][$name] = array(
      '#type' => 'container'
    );
    $form['prebidjs_dfp_settings']['bidder_adapters'][$name][$name] = array(
      '#type' => 'checkbox',
      '#title' => $adapter['name'],
      '#default_value' => $settings[$name]['active'],
      '#parents' => array(
        'bidder_adapters',
        $name,
        'active'
      ),
    );
    $form['prebidjs_dfp_settings']['bidder_adapters'][$name]['settings'] = array(
      '#type' => 'container'
    );
    foreach($adapter['settings'] as $label => $setting){
      $form['prebidjs_dfp_settings']['bidder_adapters'][$name]['settings'][$label] = array(
        '#type' => 'textfield',
        '#title' => $label,
        '#default_value' => $settings[$name]['settings'][$label],
        '#states' => array(
          'visible' => array(
            ':input[name="bidder_adapters[' . $name . '][active]"]' => array('checked' => TRUE)
          ),
          'required' => array(
            ':input[name="bidder_adapters[' . $name . '][active]"]' => array('checked' => TRUE)
          ),
        ),
        '#parents' => array(
          'bidder_adapters',
          $name,
          'settings',
          $label
        ),
      );
    }
  }

  // Add a submit and validation handlers to the exportable item form.
  $form['#validate'][] = 'prebidjs_dfp_form_validate';
  $form['#submit'][] = 'prebidjs_dfp_form_submit';
}

/**
 * Validates prebidjs actions.
 */
function prebidjs_dfp_form_validate($form, &$form_state) {}

/**
 * Submits prebidjs actions.
 */
function prebidjs_dfp_form_submit($form, &$form_state) {
  // First delete all prebidjs_dfp from the database for this exportable.
  db_delete('prebidjs_dfp')
    ->condition('schema_name', $form_state['plugin']['schema'])
    ->condition('machinename', $form_state['item']->{$form_state['plugin']['export']['key']})
    ->execute();
 
  // Now add all of the scheduled actions from the just-submitted form.
  $data = array(
    'settings' => serialize($form_state['values']['bidder_adapters']),
    'schema_name' => $form_state['plugin']['schema'],
    'machinename' => $form_state['item']->{$form_state['plugin']['export']['key']},
  );
  db_insert('prebidjs_dfp')
    ->fields($data)
    ->execute();
}

/**
 * Load Prebid.js settings for DFP tag
 */
function prebidjs_dfp_settings_load($schema_name, $dfp_machinename){
  // Load existing objects
  $query = db_select('prebidjs_dfp', 'pd');
  $query->fields('pd');
  $query->condition('pd.schema_name', $schema_name);
  $query->condition('pd.machinename', $dfp_machinename);
  $results = $query->execute()->fetchAssoc();
  return unserialize($results['settings']);
}

/**
 * Implements preprocess_html().
 */
function prebidjs_dfp_preprocess_html($variables) {
  // Add the header js here so that enough information has been loaded for
  // tokens to work properly.
  _prebidjs_dfp_global_settings();
}

/**
 * A callback function to load the global PrebigJs
 */
function _prebidjs_dfp_global_settings(){
  if (($library = libraries_load('prebidjs')) && !empty($library['loaded'])) {
    // Initialize the lib.
    $js = 'var adUnits = [];' . "\n";
    $js .= 'var pbjs = pbjs || {};' . "\n";
    $js .= 'pbjs.que = pbjs.que || [];' . "\n";

    $options = array(
      'type' => 'inline',
      'group' => JS_LIBRARY,
      'every_page' => TRUE,
      'weight' => -20, // Push this before the DFP tags @see _dfp_js_global_settings()
      'force header' => TRUE,
    );
    drupal_add_js($js, $options);
    
    // Load the in injected JS
    $js  = 'var PREBID_TIMEOUT = ' . variable_get('prebidjs_timeout', 2000) . ';' . "\n";
    $js .= 'pbjs.que.push(function() {' . "\n";
    $js .= 'pbjs.setConfig({' . "\n";
    $js .= "bidderSequence: ' " . variable_get('prebidjs_bidder_sequence', 'random') . "'," . "\n";
    $js .= 'enableSendAllBids: ' . variable_get('prebidjs_send_all_bids', TRUE) . ',' . "\n";
    $js .= "priceGranularity: '" . variable_get('prebidjs_price_granularity', 'medium') . "'" . "\n";
    $js .= '})' . "\n";
    $js .= 'pbjs.addAdUnits(adUnits);' . "\n";
    $js .= 'pbjs.requestBids({' . "\n";
    $js .= 'bidsBackHandler: sendAdserverRequest' . "\n";
    $js .= '});' . "\n";
    $js .= '});' . "\n";
    $js .= 'function sendAdserverRequest() {' . "\n";
    $js .= 'if (pbjs.adserverRequestSent) return;' . "\n";
    $js .= "pbjs.adserverRequestSent = true;" . "\n";
    $js .= 'googletag.cmd.push(function() {' . "\n";
    $js .= "pbjs.que.push(function() {" . "\n";
    $js .= 'pbjs.setTargetingForGPTAsync();' . "\n";
    $js .= 'googletag.pubads().refresh();' . "\n";
    $js .= '});' . "\n";
    $js .= '});' . "\n";
    $js .= '}' . "\n";
    $js .= 'setTimeout(function() {' . "\n";
    $js .= 'sendAdserverRequest();' . "\n";
    $js .= '}, PREBID_TIMEOUT);' . "\n";


    $js .= variable_get('dfp_injected_js2', '') . "\n";
    $js .= 'googletag.enableServices();';

    $options = array(
      'type' => 'inline',
      'group' => JS_DEFAULT,
      'every_page' => TRUE,
      'weight' => 20, // Push this before the DFP @see _dfp_js_global_settings()
      'force header' => TRUE,
    );
    drupal_add_js($js, $options);
    
  }
}

/**
 * hook_dfp_tag_alter
 */
function prebidjs_dfp_dfp_tag_alter(&$tag) {
  $settings = prebidjs_dfp_settings_load($tag->table, $tag->machinename);
  if(!empty($settings)){
    $prebidjs_dfp = array();
    if (($library = libraries_load('prebidjs')) && !empty($library['loaded'])) {
      $bids = array();
      foreach($settings as $bidder => $bid){
        if(!$bid['active']) continue;
        $bids[] = array(
          'bidder' => $bidder,
          'params' => $bid['settings']
        );
      }
      $sizes = explode(',', $tag->size);
      $ad_sizes = array();
      foreach($sizes as $size){
        list($width, $height) = explode('x', $size);
        $ad_sizes[] = array($width, $height);
      }
      $prebidjs_dfp[] = array(
        'code' => $tag->placeholder_id,
        'sizes' => $ad_sizes,
        'bids' => $bids
      );
      $js = 'adUnits = adUnits.concat(' . json_encode($prebidjs_dfp) . ');' . "\n";
      $options = array(
        'type' => 'inline',
        'group' => JS_DEFAULT,
        'every_page' => TRUE,
        'weight' => 0,
        'force header' => TRUE,
      );
      drupal_add_js($js, $options);
    }
  }
}


